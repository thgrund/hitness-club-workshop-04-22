# intro

Tidal https://tidalcycles.org/  make patterns with code

language for describing
(e.g., polyphonic, polyrhythmic, generative) sequences.

extensive library ... for transforming and combining them.

quickly create complex patterns from simple ingredients.

does not make sound itself, uses
https://supercollider.github.io/
https://github.com/musikinformatik/SuperDirt

is embedded in the Haskell language https://www.haskell.org/

## Why Haskell and what does TidalCycles benefit from?

1. Static type system
2. No side effects
3. Higher order functions
4. Functors, Applicative, Monads

## Pattern and Time

# sources of sound

## synthesizers

## samples

## effects

# patterns

## concatenation (naive)

## speed up, speed down:

## combine two patterns

## insertion: some haskell magic

## functions that produce and modify patterns: run, slow, rev

## parallel composition: stack, ","

## cat and speed-up: fastcat "[ .. ]"

## time-shift  ~>

# Nearly all above

# references:

* https://tidalcycles.org/index.php/All_effects_and_synths
* https://github.com/musikinformatik/SuperDirt
* https://github.com/tidalcycles/Dirt-Samples

* https://tidalcycles.org/index.php/Tutorial
* https://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/tc/types/
* https://tidalcycles.org/index.php/Mini_notation_syntax
