-- Intro

-- 1.1 Computer music, live coding, TopLap and Algorave
-- TopLap https://toplap.org
-- Algorave https://www.youtube.com/watch?v=S2EZqikCIfY
-- Eulerroom https://www.youtube.com/c/Eulerroom

-- https://github.com/thgrund/hitness-club-workshop-04-22

-- 1.2 TidalCycles
--
-- Tidal https://tidalcycles.org/  make patterns with code
--
-- Language for describing
-- (e.g., polyphonic, polyrhythmic, generative) sequences.
--
-- Extensive library ... for transforming and combining them.
--
-- Quickly create complex patterns from simple ingredients.

-- Is embedded in the Haskell language https://www.haskell.org/
-- There are other (new) approaches like i.e. Strudel https://strudel.tidalcycles.org/tutorial/
-- For collaboration: https://estuary.mcmaster.ca

-- 1.3. Install tidalcycles
-- At the end we should have
-- The sound enginge (SuperCollider + SuperDirt)
-- TidalCycles + haskell
-- And an editor with tidalcycles (like atom)
--
-- Ansible method: https://club.tidalcycles.org/t/install-manage-upgrades-to-tidal-environment-with-a-single-command-on-ubuntu-debian-linux-mint-ansible-method/544

-- 1.4. Pattern and Time
-- Pattern
-- Time -> [Events]

-- 2. Sources of Sounds
-- 2.1 Samples
-- https://github.com/tidalcycles/Dirt-Samples
-- https://tidalcycles.org/docs/configuration/Audio%20Samples/default_library/#default-samples-table

d1 $ n "0 1 2*2 3" # s "808"

-- 2.2 Synthesizers
-- https://tidalcycles.org/docs/patternlib/tutorials/synthesizers/
d1 $ n "0 1 2 3" # s "superpiano"

d1 $ n "0" # s "superpiano"

d1 $ n "c4 a f4 e" # s "supersaw"

-- 2.3 MIDI
-- https://tidalcycles.org/docs/configuration/MIDIOSC/midi/

-- 2.4 Effects
-- local effects
d1 $ n "c4 a f4 e" # s "supersaw" # lpf 300

d1 $ n "c4 a f4 e" # s "supersaw" # hpf 1000

-- global effects
d1 $ n "c4 a f4 e"
   # s "supersaw" # room 1 # sz 0.9 # gain 0.9

d1 $ s "808"
   # delaytime 0.4 # delayfeedback 0.2
   # delay 1


-- 3 Patterns

s "808"

n "0" # s "808"

n "0 1" # s "808"

n "0 1 2" # s "808"

-- Concatenation
-- Shorthand for |>
d1 $ s "808" # n "0 1 2 3"

d2 $ s "bd hh sn ht"

-- Take the rhytmically structure from the right
d1 $ s "808" >| n "0 1 2 3"

-- Take the rhytmically structure from the left
d1 $ s "808" |> n "0 1 2 3"

d1 $ s "808*2" <| n "0 1 2 3"

-- Speed up, speed down
d1 $ s "808*4" # speed "0.5"

d1 $ s "808" # speed "2.0"

d1 $ s "numbers" # speed "-0.5"

-- slow down and speed up
d1 $ slow 2 $ n "0 1 2 3" # s "808"

d1 $ slow 1 $ n "0 1 2 3" # s "808"

d1 $ slow 0.5 $ n "0 1 2 3" # s "808"

slow 0.5 $ n "0 1 2 3" # s "808"

d1 $ fast 1 $ n "0 1 2 3" # s "808"

d1 $ slow 2 $ fast 4 $ n "0 1 2 3" # s "808"

-- slow and fast in mini notation
n "0 1 2 3" # s "808"

-- cat === "<...>"
d1 $ cat [n "0" # lpf 500, n "1"] # s "808"

d1 $ n "<0 1 2 3>" # s "808"

d1 $ n "0 1 2 3" # s "808"

d1 $ n "[0 1 2 3]" # s "<808 superpiano>"

d1 $ fast "<1 2>" $ slow "<2 1>" $ n "<[0 1 2 3] [5 4 3 2]>" # s "<superpiano>"

d1 $ n "<0 5>" # s "<superpiano>"
