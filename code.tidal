-- Intro

-- 1.1 Computer Musik, LiveCoding, TopLap und Algorave
-- TopLap https://toplap.org
-- Algorave https://www.youtube.com/watch?v=S2EZqikCIfY

-- 1.2 TidalCycles
-- Tidal https://tidalcycles.org/ Patterns mit Code.

-- Sprache zur Beschreibung von Sequenzen
-- (Bspw. polyphon, polyrhythmisch, generativ -> hä?! genau :-D).

-- Umfassende Bibliothek ... zum Transformieren und Kombinieren der Sequenzen.

-- Erzeugt schnell komplexe Patterns mit einfachen Zutaten

-- Kann keine Töne von sich aus erzeugen, verwendet:
-- https://supercollider.github.io/
-- https://github.com/musikinformatik/SuperDirt

-- Ist eingebettet in der Sprache Haskell https://www.haskell.org/
-- Es gibt neuerdings andere Ansätze wie Strudel https://strudel.tidalcycles.org/tutorial/

-- 1.3 Warum Haskell und wie profitiert TidalCycles davon?
--  - Statisches Typ-System
--  - Keine Nebenwirkungen
--  - Funktionen höherer Ordnung
--  - Functors, Applicative und Monads

-- 1.4 Pattern und Time

-- 2. Quellen von Sounds
-- 2.1 Synthesizers
-- 2.2 Samples
-- 2.3 Midi
-- 2.4 Effekte (lokal und global)

-- 3 Patterns
-- 3.1 concatenation (naive)
-- 3.2 speed up, speed down:
-- 3.3 combine two patterns
-- 3.4 functions that produce and modify patterns: run, slow, rev
-- 3.5 parallel composition: stack, ","
-- 3.6 cat and speed-up: fastcat "[ .. ]"
-- 3.7 time-shift  ~>
-- 3.8  Mini Notation
-- https://tidalcycles.org/docs/patternlib/tutorials/mini_notation/
-- 3.9 Euklid, Polymetrik und Polyryhtmik

-- # Referenzen:
-- * https://tidalcycles.org/docs/
-- * https://github.com/musikinformatik/SuperDirt
-- * https://github.com/tidalcycles/Dirt-Samples
-- * https://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/tc/types/
